#!/usr/bin/env python3
"""
Post-process an asciinema v2 JSONL file according to embedded commands.

Commands are provided on the same line as the individual frames they impact.

Available commands:

* `-`: drop frame
* `^{t}`: where `{t}` is an amount to increase or decrease distance to
  prior frame, as fraction of the difference
"""
import argparse
import json
from pathlib import Path


class Processor:
    def __init__(self, lines):
        self.offset = 0
        self.last_line = None
        self.line = [0, None, None]
        self.lines = enumerate(lines)
        # Skip header
        _, header = next(self.lines)
        self.result = [header.strip()]
        self.operation = self.append

    def append(self):
        ts, etype, data = self.line
        new_ts = round(ts + self.offset, 6)
        line = [new_ts, etype, data]
        self.result.append(json.dumps(line))

    def discard(self):
        last_ts, _, _ = self.last_line
        ts, _, _ = self.line
        self.offset += last_ts - ts

    def make_earlier(self):
        # Append, but make a little earlier, as a fraction of the difference
        # from the last entry.
        diff_amt = float(self.command[1:])
        last_ts, _, _ = self.last_line
        ts, _, _ = self.line
        diff = (ts - last_ts) * diff_amt
        self.offset += diff
        self.append()

    def next(self):
        self.last_line = self.line

        try:
            i, line = next(self.lines)
        except StopIteration:
            return None

        if not line.startswith('['):
            json_start = line.find('[')
            self.command, line = line[0:json_start], line[json_start:]
            if self.command.startswith('-'):
                # Remove
                self.operation = self.discard
            elif self.command.startswith('^'):
                self.operation = self.make_earlier
            else:
                raise ValueError(f"Unknown key {key} on line {i}")
        else:
            self.operation = self.append

        self.line = json.loads(line)
        return True

    def run(self):
        while self.next():
            self.operation()
        return self.result


def main():
    parser = argparse.ArgumentParser(
        description='helper for asciinema recordings',
    )
    parser.add_argument(
        '--output', help='File to write result to, the input file by default',
    )
    parser.add_argument('file')

    args = parser.parse_args()

    with open(args.file, encoding='utf-8') as f:
        lines = f.readlines()

    new_lines = Processor(lines).run()
    text = "\n".join(l for l in new_lines if l)

    if not args.output:
        output_file = args.file
    else:
        output_file = args.output

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(text)


if __name__ == '__main__':
    main()
